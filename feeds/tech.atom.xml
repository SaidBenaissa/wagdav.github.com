<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>thewagner.net</title><link href="http://thewagner.net/" rel="alternate"></link><link href="http://thewagner.net/feeds/tech.atom.xml" rel="self"></link><id>http://thewagner.net/</id><updated>2013-05-15T00:00:00+02:00</updated><entry><title>Backup</title><link href="http://thewagner.net/blog/2013/05/15/backup/" rel="alternate"></link><updated>2013-05-15T00:00:00+02:00</updated><author><name>Dávid</name></author><id>tag:thewagner.net,2013-05-15:blog/2013/05/15/backup/</id><summary type="html">&lt;p&gt;At work, I stored all my important data on the lab's server which
(obviously) was backed up once a day.  At home, on my personal laptop I
haven't had a systematic backup solution.  Now I'm changing this.&lt;/p&gt;
&lt;div class="section" id="everyday-backup-with-obnam"&gt;
&lt;h2&gt;Everyday backup with Obnam&lt;/h2&gt;
&lt;p&gt;I decided that I will backup my laptop's important data on my home
file-server.  It's a &lt;a class="reference external" href="http://sharecenter.dlink.com/products/DNS-320"&gt;DNS-320 ShareCenter&lt;/a&gt; with 2x1TB disk in RAID 1.
Naturally, this won't save me in case of theft or fire in my house, but I
will deal with the off-site backup problem later, when a local backup
problem is solved.&lt;/p&gt;
&lt;p&gt;For my backups I use &lt;a class="reference external" href="http://liw.fi/obnam"&gt;Obnam&lt;/a&gt;.  My configuration file &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.obnam.conf&lt;/span&gt;&lt;/tt&gt; is
qute simple:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[config]
repository = /media/nas/backup
log = /home/dwagner/.obnam/obnam.log
exclude = /home/dwagner/temp, /home/dwagner/pictures
&lt;/pre&gt;
&lt;p&gt;To backup I run:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ obnam backup $HOME
&lt;/pre&gt;
&lt;p&gt;which takes a couple of minutes.  Occasionally I make obnam forget the old
files:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ obnam forget --keep=14d
&lt;/pre&gt;
&lt;p&gt;Of course I could put this in a little script and use &lt;tt class="docutils literal"&gt;cron&lt;/tt&gt; or something
to run the backup regularly, but I do it manually for a while to gain some
experience.&lt;/p&gt;
&lt;p&gt;I exclude the temporary files in my home directory because it just contains
all kinds of junk I don't really care loosing.  I also don't backup this way
the &lt;tt class="docutils literal"&gt;pictures&lt;/tt&gt; directory, since I secure my photos in there differently.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="photo-backup-with-git-annex"&gt;
&lt;h2&gt;Photo backup with git-annex&lt;/h2&gt;
&lt;p&gt;I store my personal photo collection in a &lt;a class="reference external" href="http://git-annex.branchable.com"&gt;git-annex&lt;/a&gt; repository.  I have
at least two copies of all the pictures (one on the file server and one on a
USB HDD dedicated for this purpose).  A copy of the recent photos, usually
the current year's are on my laptop as well.  I noticed that these are the
pictures I access the most frequently, mainly showing them to friends and
family.  If I need to go back earlier in time, I can have those photos from
home in a day (or when I go home), but not instantly from my laptop.  This
works for me, because the SSD on my laptop is not that spacious, and I don't
want to store all my photos on it.&lt;/p&gt;
&lt;p&gt;When I download new pictures from my camera I do &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;git-annex&lt;/span&gt; sync&lt;/tt&gt; across
the picture repositories making sure that my precious memories are well
preserved.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Cardboard Raspberry Pi case</title><link href="http://thewagner.net/blog/2013/03/17/cardboard-raspberry-pi-case/" rel="alternate"></link><updated>2013-03-17T00:00:00+01:00</updated><author><name>Dávid</name></author><id>tag:thewagner.net,2013-03-17:blog/2013/03/17/cardboard-raspberry-pi-case/</id><summary type="html">&lt;p&gt;I bought a &lt;a class="reference external" href="http://raspberrypi.org"&gt;Raspberry Pi&lt;/a&gt;.  No need to explain
this since nowadays &lt;em&gt;everybody&lt;/em&gt; buys a Raspberry Pi.  Even if I don't use it,
large part of its (not too high) price goes for charity, I figured.&lt;/p&gt;
&lt;p&gt;I was reluctant to buy a casing for it in the shop, because I wanted to
build it myself.  There are tons of interesting RPi case projects out there,
but I found &lt;a class="reference external" href="http://www.judepullen.com/designmodelling/raspberry-pi-case/"&gt;Jude Pullen&lt;/a&gt;'s the most
interesting.  I followed his instructions and the result is a very cool
Raspberry Pi case out of cardboard.  In fact, I recycled the packaging of my
new ThinkPad.&lt;/p&gt;
&lt;img alt="|filename|/images/rpi-cardboard.jpg" class="align-center" src="http://thewagner.net/static/images/rpi-cardboard.jpg" style="width: 100%;" /&gt;
&lt;p&gt;I didn't do the light-pipes.  I'm not sure if this is the Pi's final casing
and I didn't want to glue anything onto the board itself.  In summary,
working with cardboard is easy, fun and kept me away from the computer for
some nights.  I may build a better version (with light pipes), or even
something completely different in the future.&lt;/p&gt;
</summary><category term="raspberrypi"></category></entry><entry><title>Brain transplant</title><link href="http://thewagner.net/blog/2013/03/12/brain-transplant/" rel="alternate"></link><updated>2013-03-12T00:00:00+01:00</updated><author><name>Dávid</name></author><id>tag:thewagner.net,2013-03-12:blog/2013/03/12/brain-transplant/</id><summary type="html">&lt;p&gt;In the lab we have a camera system composed of four cameras.  The system is
controlled by two identical PCs, two cameras connected to each.  After a
long break of operation, when we wanted to use the system again, the hard
drive in one PC decided to quit science and went dead.  We replaced the poor
fellow with a new drive and I wanted to transfer the system as it is from
the &lt;tt class="docutils literal"&gt;healty&lt;/tt&gt; computer to the new drive of the &lt;tt class="docutils literal"&gt;braindead&lt;/tt&gt; system .
Following the brain transplant procedure in its most realistic, bloody
purity.&lt;/p&gt;
&lt;p&gt;My idea is to run on &lt;tt class="docutils literal"&gt;healthy&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
dd if=/dev/hda | ssh user&amp;#64;braindead sudo dd of=/dev/sda
&lt;/pre&gt;
&lt;p&gt;To this end I boot up &lt;tt class="docutils literal"&gt;brainded&lt;/tt&gt; (with the new drive in) from a &lt;a class="reference external" href="http://www.debian.org/CD/live/"&gt;Debian
Live CD&lt;/a&gt;.  While setting up the network
(IP address, DNS, etc.), it turns out that the network card needs some
non-free firmware which are not on the Installer/Live CD.  This is a bit
annoying but not the end of the world.  After some googling I learn that I
need &lt;a class="reference external" href="http://packages.debian.org/squeeze/all/firmware-linux-nonfree/download"&gt;fimrware-linux-nonfree&lt;/a&gt;,
so I download and put it on a USB stick and install (&lt;tt class="docutils literal"&gt;dpkg &lt;span class="pre"&gt;-i&lt;/span&gt;&lt;/tt&gt;) it on
&lt;tt class="docutils literal"&gt;braindead&lt;/tt&gt;.  Now it has network connection and an SSH server running.&lt;/p&gt;
&lt;p&gt;To prepare for the transplant I put &lt;tt class="docutils literal"&gt;healthy&lt;/tt&gt; in single user mode and
mount the file system read-only (as root):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ init 1
$ mount / -o remount,ro
&lt;/pre&gt;
&lt;p&gt;Now everything is ready for the procedure.  I run &lt;tt class="docutils literal"&gt;dd&lt;/tt&gt; through SSH as
described above.  It takes some time, but the transfer works fine.&lt;/p&gt;
&lt;p&gt;On &lt;tt class="docutils literal"&gt;braindead&lt;/tt&gt;, still running the Live CD,  I mount the new disk and&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;change the host name in &lt;tt class="docutils literal"&gt;/etc/hostname&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;generate new host keys
(&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;ssh-keygen&lt;/span&gt; &lt;span class="pre"&gt;-t&lt;/span&gt; rsa &lt;span class="pre"&gt;-f&lt;/span&gt; /etc/ssh/ssh_host_rsa_key&lt;/tt&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I reboot &lt;tt class="docutils literal"&gt;braindead&lt;/tt&gt; and voilá, it works!  Well almost... I experience
some problem with the networking.  I quickly figure it out that the network
card enumeration (eth0 eth1 swap thingy) is screwed, but it is easy to fix
by editing &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/etc/udev/rules.d/70-persistent-net.rules&lt;/span&gt;&lt;/tt&gt; and removing the
lines that refer (by MAC address) to the network card which is in the other
machine.&lt;/p&gt;
</summary></entry><entry><title>Pelican up and running</title><link href="http://thewagner.net/blog/2013/03/08/pelican-up-and-running/" rel="alternate"></link><updated>2013-03-08T00:00:00+01:00</updated><author><name>Dávid</name></author><id>tag:thewagner.net,2013-03-08:blog/2013/03/08/pelican-up-and-running/</id><summary type="html">&lt;p&gt;I decided to start blogging again.  I wanted to move away from &lt;a class="reference external" href="http://www.blogspot.com"&gt;Blogspot&lt;/a&gt; and write posts using some markup in &lt;tt class="docutils literal"&gt;vi&lt;/tt&gt; and
publish them as static HTML.  I looked into many static blog generators and
I ended up choosing &lt;a class="reference external" href="http://getpelican.com"&gt;Pelican&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The steps in the documentation worked fine, I had my blog running in about
2 mins.  I decided to separate the site generation in two different
repositories&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/wagdav/thewagner.net"&gt;https://github.com/wagdav/thewagner.net&lt;/a&gt; contains the posts in RST files
and the neccessary config files for Pelican.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/wagdav/wagdav.github.com"&gt;https://github.com/wagdav/wagdav.github.com&lt;/a&gt; contains the actual HTML
source and receieves only automatic updates from the first repository.
This is set up to generate a &lt;a class="reference external" href="http://pages.github.com/"&gt;User Github Page&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;On my laptop I have the clone of these two repositories as:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
~/blog/thewagner.net/
~/blog/wagdav.github.com/
&lt;/pre&gt;
&lt;p&gt;I configured Pelican to place its output in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;../wagdav.github.com&lt;/span&gt;&lt;/tt&gt;.  I
needed to make a small adjustment in the generated &lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt;, to prevent
the &lt;tt class="docutils literal"&gt;make clean&lt;/tt&gt; command destroying the git repository in the output
directory and deleting the files needed for Github Pages.  So now the
&lt;tt class="docutils literal"&gt;clean&lt;/tt&gt; target is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    @find &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt; -mindepth 1 -not -iwholename &lt;span class="s1"&gt;&amp;#39;*/.git*&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
                                   -not -name &lt;span class="s1"&gt;&amp;#39;README.md&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
                                   -not -name &lt;span class="s1"&gt;&amp;#39;CNAME&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;which does the job just fine.&lt;/p&gt;
&lt;p&gt;The next steps are to import posts from my &lt;a class="reference external" href="http://aventuresalausanne.blogspot.com"&gt;old blog&lt;/a&gt; and change the default style.  I
want to have something that uses &lt;a class="reference external" href="http://twitter.github.com/bootstrap/"&gt;Twitter Bootstrap&lt;/a&gt;.&lt;/p&gt;
</summary><category term="pelican"></category></entry></feed>